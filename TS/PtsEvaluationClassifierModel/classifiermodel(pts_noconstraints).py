# -*- coding: utf-8 -*-
"""ClassifierModel(PTS-noConstraints).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fw3ZWNGAUN0qXJJeHKjGCQKAktJGXRWO
"""

from google.colab import files
uploaded = files.upload()  # This will prompt you to upload files manually

import pandas as pd
pts = pd.read_csv("pseudo_time_series_noConstraints.csv")
ts = pd.read_csv("time_series_data.csv")
pts.rename(columns={'c': 'Stage'}, inplace=True)

# Initialize the STUDYNO column
pts['STUDYNO'] = 1

# Initialize a counter for the patient ID
patient_id = 1

# Iterate over the rows and assign STUDYNO based on 't'
for i in range(1, len(pts)):
    if pts.loc[i, 't'] == 1:  # When t starts from 1, it signifies a new patient
        patient_id += 1
    pts.loc[i, 'STUDYNO'] = patient_id

# Verify that the STUDYNO column is correctly assigned
print(pts[['t', 'STUDYNO']].head(40))  # Print first 40 rows to check the assignment

# Check the total number of unique STUDYNO values
num_patients = pts['STUDYNO'].nunique()

print(f"Total number of unique STUDYNO's assigned: {num_patients}")

# Convert Date to datetime format in TS
ts["Date"] = pd.to_datetime(ts["Date"])

# Sort TS by STUDYNO (patient), then by Date (chronological order per patient)
ts = ts.sort_values(by=["STUDYNO", "Date"])

# Handle missing values (simple forward-fill approach)
ts.fillna(method="ffill", inplace=True)
pts.fillna(method="ffill", inplace=True)

# Select relevant features (excluding non-informative columns)
ts_features = ["Age", "Cholesterol", "Pressure"]  # Example features
pts_features = ["a", "chol", "trestbps"]  # Matching PTS columns

# Prepare training data (X = features at current time, y = next stage)
def prepare_data(df, feature_cols):
    """Prepare X (current features) and y (next time-step disease stage)."""
    df["Next_Stage"] = df.groupby("STUDYNO")["Stage"].shift(-1)  # Shift stage forward
    df.dropna(subset=["Next_Stage"], inplace=True)  # Remove last records per patient (no next step)

    X = df[feature_cols]  # Features
    y = df["Next_Stage"]  # Target label (disease stage at next time-step)

    return X, y

# Prepare data for TS and PTS
X_ts, y_ts = prepare_data(ts, ts_features)
X_pts, y_pts = prepare_data(pts, pts_features)

# Print first few rows to check
print(X_ts.head(), y_ts.head())
print(X_pts.head(), y_pts.head())

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.model_selection import train_test_split

# Split data into training and testing sets (80% training, 20% testing)
X_ts_train, X_ts_test, y_ts_train, y_ts_test = train_test_split(X_ts, y_ts, test_size=0.2, random_state=42)
X_pts_train, X_pts_test, y_pts_train, y_pts_test = train_test_split(X_pts, y_pts, test_size=0.2, random_state=42)

# Initialize the classifier
rf_ts = RandomForestClassifier(n_estimators=100, random_state=42)
rf_pts = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model using real time series (TS)
rf_ts.fit(X_ts_train, y_ts_train)

# Train the model using pseudo time series (PTS)
rf_pts.fit(X_pts_train, y_pts_train)

# Predict on the test data for TS and PTS
y_ts_pred = rf_ts.predict(X_ts_test)
y_pts_pred = rf_pts.predict(X_pts_test)

# Evaluate the Random Forest model on TS data
print("Real Time Series (TS) Model Performance:")
print(f"Accuracy: {accuracy_score(y_ts_test, y_ts_pred)}")
print("Classification Report:")
print(classification_report(y_ts_test, y_ts_pred))
print("Confusion Matrix:")
print(confusion_matrix(y_ts_test, y_ts_pred))

# Evaluate the Random Forest model on PTS data
print("Pseudo Time Series (PTS) Model Performance:")
print(f"Accuracy: {accuracy_score(y_pts_test, y_pts_pred)}")
print("Classification Report:")
print(classification_report(y_pts_test, y_pts_pred))
print("Confusion Matrix:")
print(confusion_matrix(y_pts_test, y_pts_pred))

from sklearn.model_selection import cross_val_score
import numpy as np

# Cross-validation for TS and PTS
cv_ts = cross_val_score(rf_ts, X_ts, y_ts, cv=5)  # 5-fold cross-validation
cv_pts = cross_val_score(rf_pts, X_pts, y_pts, cv=5)  # 5-fold cross-validation

print("Cross-validation scores for TS model:", cv_ts)
print("Cross-validation scores for PTS model:", cv_pts)

print(f"Mean Cross-validation accuracy for TS: {np.mean(cv_ts)}")
print(f"Mean Cross-validation accuracy for PTS: {np.mean(cv_pts)}")